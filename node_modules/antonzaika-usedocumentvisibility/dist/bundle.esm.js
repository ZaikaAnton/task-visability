import { useState, useRef, useEffect, useCallback } from 'react';

function useDocumentVisibility() {
  var isSSR = typeof document === "undefined";
  var _a = useState(function () {
      return isSSR || document.visibilityState === "visible";
    }),
    visible = _a[0],
    setVisible = _a[1];
  var _b = useState(0),
    count = _b[0],
    setCount = _b[1];
  var handlersRef = useRef([]);
  useEffect(function () {
    var handleVisibilityChange = function () {
      var isVisible = document.visibilityState === "visible";
      setVisible(isVisible);
      if (!isVisible) {
        setCount(function (prevCount) {
          return prevCount + 1;
        });
      }
      handlersRef.current.forEach(function (handler) {
        return handler(isVisible);
      });
    };
    document.addEventListener("visibilitychange", handleVisibilityChange);
    return function () {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, []);
  var onVisibilityChange = useCallback(function (handler) {
    handlersRef.current.push(handler);
    return function () {
      handlersRef.current = handlersRef.current.filter(function (h) {
        return h !== handler;
      });
    };
  }, []);
  return {
    visible: visible,
    count: count,
    onVisibilityChange: onVisibilityChange
  };
}

export { useDocumentVisibility };
//# sourceMappingURL=bundle.esm.js.map
